#!/usr/bin/make -Rf
# Run the ABySS paired-end assembler.
# Written by Shaun Jackman <sjackman@bcgsc.ca>.

# Integrate with Sun Grid Engine (SGE)
ifdef JOB_NAME
name?=$(JOB_NAME)
endif
ifdef SGE_TASK_ID
k?=$(SGE_TASK_ID)
endif
ifdef NSLOTS
ifneq ($(NSLOTS), 1)
np?=$(NSLOTS)
endif
endif

mpirun=$(shell which mpirun)

path?=$(shell if ! which ABYSS >/dev/null 2>/dev/null; then \
	dirname $(MAKEFILE_LIST); fi)
ifdef path
PATH:=$(path):$(PATH)
endif

ifdef name
out?=$(name)-contigs.fa
endif
ifdef out
name?=$(out:-contigs.fa=)
endif
ifndef name
$(error missing argument name)
endif

ifdef lib
map=$(foreach a,$(2),$(call $(1),$(a)))
deref=$($1)
in?=$(call map, deref, $(lib))
else
lib?=$(name)
$(lib)?=$(in)
endif

ifdef in
override in:=$(strip $(in))
endif
ifdef se
override se:=$(strip $(se))
endif

# Mandatory parameters
ifndef in
$(error missing argument in or lib)
endif
ifndef k
$(error missing argument k)
endif
ifndef n
$(error missing argument n)
endif

# ABYSS parameters
abyssopt += -k$k
ifdef q
abyssopt += -q$q
endif
ifdef l
$(error argument l is deprecated)
endif
ifdef e
abyssopt += -e$e
endif
ifdef E
abyssopt += -E$E
endif
ifdef t
abyssopt += -t$t
endif
ifdef c
abyssopt += -c$c
endif
ifdef b
abyssopt += -b$b
popbubblesopt += -b$b
endif
abyssopt += $v --coverage-hist=coverage.hist -s $*-bubbles.fa

# Common paired-end parameters
ifdef PE_HOSTFILE
hostname?=$(shell hostname -f)
j?=$(shell awk '$$1 == "$(hostname)" {print $$2}' $(PE_HOSTFILE))
endif
ifdef np
j?=$(np)
endif
j?=2

# DistanceEst parameters
s?=100

# Remove environment variables.
unexport in se $(lib)

all: $(out)

clean:
	rm -f *.adj *.pair.gz *.hist *.dist *.path

.PHONY: all clean
.DELETE_ON_ERROR:
.SECONDARY:

# Single-end assembly

%-1.fa: $(in) $(se)
ifdef np
	$(mpirun) -np $(np) ABYSS-P $(abyssopt) $(ABYSS_OPTIONS) -o $@ $^
else
	ABYSS $(abyssopt) $(ABYSS_OPTIONS) -o $@ $^
endif

%.adj: %.fa
	AdjList $v -k$k $< >$@

# Pop bubbles.

%-1.indel: %-1.adj
	PopBubbles $v -k$k $(popbubblesopt) $(POPBUBBLES_OPTIONS) $< >$@

%-3.fa: %-1.indel %-1.fa
	awk '!/^>/ {x[">" $$1]=1; next} \
		{getline s} !x[$$1] {print $$0 "\n" s}' $^ >$@

# Estimate distances between contigs

dist=$(addsuffix -3.dist, $(lib))

$(dist): %-3.dist: $(name)-3.fa
	KAligner $v $(KALIGNER_OPTIONS) -j$j -k$k $(strip $($*)) $< \
		|ParseAligns $v -k$k -h $*-3.hist \
		|sort -snk3 -k4 \
		|DistanceEst $v -k$k -s$s -n$n -o $@ $*-3.hist

%-3.bam: $(name)-3.fa
	KAligner $v $(KALIGNER_OPTIONS) -j$j -k$k $(strip $($*)) $< \
		|ParseAligns $v -k$k -h /dev/null \
		|sort -snk3 -k4 \
		|samtools view -Sb - -o $@

%.bam.bai: %.bam
	samtools index $<

# Find overlaps between contigs

%.dist: $(dist)
	abyss-joindist $^ >$@

%-overlap.fa: %.fa %.adj %.dist
	Overlap $v $(OVERLAP_OPTIONS) -k$k -o $@ $^

%-4.fa: %-3.fa %-3-overlap.fa
	cat $^ >$@

# Paired-end assembly

%-4.path1: %-4.adj %-3.dist
	SimpleGraph $v $(SIMPLEGRAPH_OPTIONS) -j$j -k$k -o $@ $^

%-4.path2: %-4.adj %-4.path1
	MergePaths $v -j$j -k$k -o $@ $^

%-4.path3: %-4.adj %-4.path2
	PathOverlap $v -k$k $^ >$@

ifndef cs

%-contigs.fa: %-4.fa %-4.path2
	MergeContigs $v -k$k -o $@ $^

else

%-cs.fa: %-4.fa %-4.path2
	MergeContigs $v -k$k -o $@ $^

%-contigs.fa: %-cs.fa
	KAligner $v --seq -m -j$j -k$k $(in) $(se) $< \
		|Consensus $v -o $@ $<

endif
